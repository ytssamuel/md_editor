/
├── index.html          // HTML 主檔案，包含頁面結構和外部資源引用
├── favicon.svg         // 網頁標籤圖示
├── styles/
│   ├── main.css      // 主樣式檔案，匯入所有其他樣式
│   ├── variables.css // CSS 變數，定義顏色、字體等
│   ├── base.css      // 基礎樣式，設定 HTML 元素的預設樣式
│   ├── components.css// 組件樣式，定義可重用 UI 組件的樣式
│   ├── layout.css    // 佈局樣式，控制頁面整體佈局
│   └── markdown.css  // Markdown 渲染區塊的樣式
├── scripts/
│   ├── main.js         // 核心程式碼：初始化、事件綁定、DOM 快取、效能優化 (debounce / rAF 捲動同步 / Mermaid 主題差異初始化)
│   ├── uiManager.js    // UI 管理：主題切換、檢視模式、標頭收合
│   ├── fileHandler.js  // 檔案處理：上傳(含重新選同檔支持)、下載、清除、PDF 匯出
│   ├── markdownRenderer.js// Markdown 渲染：解析、語法高亮、Mermaid/ABC/MathJax、側邊大綱
│   ├── settingsManager.js // 標題色彩設定：套用 / 儲存並關閉 / 還原 (即時預覽不關閉)
│   ├── modalManager.js // 模態框：Promise 介面、ESC 關閉、focus trap、Tab 循環、還原焦點
│   ├── logger.js       // 日誌抽象：統一 debug/info/warn/error 輸出，可日後接遠端
│   └── config.js       // （若使用）集中靜態設定 / 常數（目前顏色映射保留在 settingsManager 內，可逐步遷移）
├── demo.md             // 示範用的 Markdown 檔案
└── README.md           // 專案說明文件

說明：

- index.html：
  - 專案的入口點，定義了頁面的基本結構。
  - 引入了 CSS 樣式檔案、JavaScript 腳本和外部函式庫。
  - 包含編輯器、預覽區、工具列和側邊欄等 UI 元素。

- styles/：
  - 包含所有 CSS 樣式檔案，用於控制頁面的外觀和佈局。
  - main.css 是主樣式檔案，負責匯入其他樣式檔案。
  - variables.css 定義了 CSS 變數，方便樣式管理和維護。
  - base.css 設定了 HTML 元素的預設樣式，例如 body、h1 和 p。
  - components.css 定義了可重用 UI 組件的樣式，例如按鈕和模態框。
  - layout.css 控制頁面的整體佈局，例如分割容器和側邊欄。
  - markdown.css 定義了 Markdown 渲染區塊的樣式，例如預覽區。

- scripts/：
  - main.js 是核心腳本，負責初始化應用程式、綁定事件和導入其他模組，並新增：
    * DOM 元素集中快取減少重複 query
    * 內容變更使用 debounce 以降低渲染次數
    * Editor 捲動同步使用 requestAnimationFrame 節流
    * Mermaid 僅在主題變更時重新初始化
  - uiManager.js 處理 UI 相關的功能，例如主題切換和檢視模式。
  - fileHandler.js 增強：移除無效字串 replace、上傳後清空 input.value 允許同檔重傳、錯誤集中 logger。
  - markdownRenderer.js 現採用集中 logger，Console 改為 logger；加入基本 JSDoc。
  - settingsManager.js 新增「套用」按鈕（不關閉 Modal），重設不關閉以利即時比較。
  - modalManager.js 增強：ESC 關閉、focus trap、Tab 循環、還原先前焦點，提高可及性 (a11y)。
  - logger.js 新增：集中日誌層，可用 localStorage.setItem('log:level','debug') 控制輸出。

- 函式庫：
  - marked.js：用於將 Markdown 轉換為 HTML。
  - highlight.js：用於程式碼高亮。
  - mermaid.js：用於渲染 Mermaid 圖表。
  - abcjs：用於渲染 ABC 樂譜。
  - MathJax：用於渲染數學公式。

- 流程：
  1.  使用者在編輯器中輸入 Markdown 內容。
  2.  change 事件觸發後經 debounce (300ms 預設) 才進行渲染，避免高頻輸入造成卡頓。
  3.  main.js 呼叫 updateAll()（內部確保 Mermaid 僅在主題變更時初始化）。
  4.  markdownRenderer.updatePreview() 呼叫 marked.parse() 產生 HTML。
  5.  預覽區 innerHTML 更新後觸發 highlight / Mermaid / ABC / MathJax。
  6.  更新側邊大綱。
  7.  Editor scroll → rAF 節流的同步程式更新預覽捲動位置。
  8.  日誌透過 logger.js 輸出（可調整層級）。